const app = angular.module("shopping-cart-app", []);

app.controller("shopping-cart-ctrl", function ($scope, $http) {
    $scope.products = []; // Danh s√°ch s·∫£n ph·∫©m

    // G·ªçi API l·∫•y danh s√°ch s·∫£n ph·∫©m
    $http.get("/rest/products")
        .then(resp => {
            $scope.products = resp.data;
            console.log("‚úÖ Products loaded:", $scope.products);
        })
        .catch(error => {
            console.error("‚ùå L·ªói khi t·∫£i danh s√°ch s·∫£n ph·∫©m:", error);
        });

    /*
    * QU·∫¢N L√ù GI·ªé H√ÄNG
    */
    $scope.cart = {
        items: JSON.parse(localStorage.getItem("cart")) || [],
        shippingAddress: "",

        add(event) {
            let button = event.currentTarget;
            let product = {
                id: button.getAttribute("data-id"),
                name: button.getAttribute("data-name"),
                price: parseFloat(button.getAttribute("data-price")),
                image: button.getAttribute("data-image")
            };

            console.log("üõí Th√™m s·∫£n ph·∫©m:", product);

            $http.get("/api/check-login").then(resp => {
                if (resp.data) {
                    console.log("‚úÖ User is logged in. Adding product ID:", product.id);
                    $scope.cart.addToCart(product);
                } else {
                    console.warn("‚ö†Ô∏è User is NOT logged in. Redirecting to login...");
                    window.location.href = "/login";
                }
            }).catch(error => {
                console.error("‚ùå Error checking login:", error);
            });
        },

        addToCart(product) {
            let existing = this.items.find(item => item.id == product.id);
            if (existing) {
                existing.qty++;
            } else {
                product.qty = 1;
                this.items.push(product);
            }
            this.saveToLocalStorage();
        },

        updateQuantity(id, qty) {
            let product = this.items.find(item => item.id == id);
            if (product) {
                product.qty = Math.max(qty, 1); // Kh√¥ng cho ph√©p s·ªë l∆∞·ª£ng nh·ªè h∆°n 1
                this.saveToLocalStorage();
                console.log("üîÑ Quantity updated:", product);
            }
        },

        get count() {
            return this.items.reduce((total, item) => total + item.qty, 0);
        },

        get amount() {
            return this.items.reduce((total, item) => total + (item.qty * item.price), 0);
        },

        remove(id) {
            this.items = this.items.filter(item => item.id !== id);
            this.saveToLocalStorage();
        },

        clear() {
            this.items = [];
            this.saveToLocalStorage();
        },

        amt_of(item) {
            return item.qty * item.price;
        },

        saveToLocalStorage() {
            localStorage.setItem("cart", JSON.stringify(this.items));
            console.log("üíæ Gi·ªè h√†ng ƒë√£ l∆∞u:", this.items);
        },

        checkout() {
            let payload = {
                username: "guest", // ho·∫∑c null, ho·∫∑c b·ªè lu√¥n n·∫øu backend kh√¥ng c·∫ßn
                address: this.shippingAddress || "Kh√¥ng c√≥ ƒë·ªãa ch·ªâ",
                cart: this.items.map(item => ({
                    productId: item.id,
                    quantity: item.qty
                }))
            };

            // Gi·∫£ l·∫≠p h√†nh ƒë·ªông checkout m√† kh√¥ng c·∫ßn g·ªçi API
            console.log("‚úÖ Checkout th√†nh c√¥ng");

            // X√≥a gi·ªè h√†ng (n·∫øu c√≥)
            this.clear();

            // Chuy·ªÉn h∆∞·ªõng sang trang /orders/success
            window.location.href = "/orders/success";  // Chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn trang success
        }
    };

    console.log("üì§ Gi·ªè h√†ng ƒë√£ t·∫£i:", $scope.cart.items);
    console.log("Script shopping-cart-app.js ƒë√£ ch·∫°y!");
});
